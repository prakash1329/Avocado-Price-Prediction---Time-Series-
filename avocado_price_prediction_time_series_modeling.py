# -*- coding: utf-8 -*-
"""Avocado Price Prediction - Time Series Modeling

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HSEeYoeI7O4vi6qpOFmMGyOTgnFXEihS

#Importing Data from Kaggle
"""

!pip install -U -q kaggle
!mkdir -p ~/.kaggle

from google.colab import files
files.upload()

!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d neuromusic/avocado-prices
!ls

!unzip avocado-prices.zip

"""#Importing Libraries"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
from fbprophet import Prophet

# %matplotlib inline
plt.style.use('fivethirtyeight')

df= pd.read_csv('/content/avocado.csv')
df.head()

df.tail()

df.dtypes

df.info()

df.describe()

df['Date'] = pd.to_datetime(df['Date'])
df = df.sort_values('Date')

"""#Data Exploration"""

plt.figure(figsize=(20,5))
plt.plot(df['Date'], df['AveragePrice'])
plt.ylim((0,4))

plt.figure(figsize=[25,7])
sns.countplot(x = 'region', data = df)
plt.xticks(rotation = 90)
plt.xlabel('Region')
plt.ylabel('Number of Records')
plt.title('Bar Chart to indicate the number of regions', y = 1.01, fontsize = 25)

plt.figure(figsize=[12.5,7])
sns.countplot(x = 'year', data = df)
plt.xlabel(' Year')
plt.ylabel(' Number of Records')
plt.title(' Bar Chart to show the distribution of records for different Years')

df.type.value_counts()

"""# Modeling Time Series with Facebook Prophet

##Price Prediction with Organic Type
"""

organic_df = df[df['type']=='organic']
organic_df

plt.figure(figsize=(20,5))
plt.plot(organic_df['Date'], organic_df['AveragePrice'])
plt.xticks([])

organic_df = organic_df.rename(columns={'Date':'ds', 'AveragePrice':'y'})

m = Prophet()
m.fit(organic_df)
future = m.make_future_dataframe(periods=365)
forecast = m.predict(future)

figure = m.plot(forecast, xlabel='Date', ylabel='Price')

decomposed_figure = m.plot_components(forecast)

"""##Price Prediction with Conventional Type"""

conventional_df = df[df['type']=='conventional']
conventional_df

plt.figure(figsize=(20,5))
plt.plot(conventional_df['Date'], conventional_df['AveragePrice'])
plt.xticks([])

conventional_df = conventional_df.rename(columns={'Date':'ds', 'AveragePrice':'y'})

m = Prophet()
m.fit(conventional_df)
future = m.make_future_dataframe(periods=365)
forecast = m.predict(future)

figure = m.plot(forecast, xlabel='Date', ylabel='Price')

decomposed_figure = m.plot_components(forecast)

"""##Final Model Prediction"""

prophet_df = df[['Date', 'AveragePrice']] 
prophet_df

prophet_df = prophet_df.rename(columns={'Date':'ds', 'AveragePrice':'y'})
prophet_df

m = Prophet()
m.fit(prophet_df)

future = m.make_future_dataframe(periods=365)
forecast = m.predict(future)
forecast

figure = m.plot(forecast, xlabel='Date', ylabel='Price')

decomposed_figure = m.plot_components(forecast)

predictions = pd.DataFrame(forecast['yhat'])
predictions = predictions.set_index(forecast['trend'])
predictions.to_csv("Avocado Price Prediction_Results.csv" )

